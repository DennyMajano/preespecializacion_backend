paths:
  # /usuarios: # path of the user from your endpoint
  #   post: # endpoint request type (post request)
  #     tags: # Tag property
  #       - Usuarios # Value of the tag
  #     summary: Crear un nuevo Usuario
  #     produces:
  #       - application/json
  #     parameters: # request parameters
  #       - in: body # request body
  #         name: Create # name of request, can be any name
  #         description: Esto es la data para crear un nuevo Usuario
  #         required: false # can also be true depending on user preference
  #         schema: # Schema definition
  #           $ref: "#/definitions/create"
  #     responses: # server responses
  #       201:
  #         description: se creó con éxito
  #       500:
  #         description: Error de servidor ya sea por problemas de base de datos o logica en código

  #       400:
  #         description: no se pudo crear por que faltan datos obligatorios

  #   #Update de módulos
  #   put: # endpoint request type (put request)
  #     tags: # Tag property
  #       - Modulos # Value of the tag
  #     summary: Actualizar un  Módulo
  #     produces:
  #       - application/json
  #     parameters: # request parameters
  #       - in: body # request body
  #         name: Update # name of request, can be any name
  #         description: Esto es para actualizar un módulo
  #         required: false # can also be true depending on user preference
  #         schema: # Schema definition
  #           $ref: "#/definitions/update"
  #     responses: # server responses
  #       200:
  #         description: se actualizó con éxito
  #       500:
  #         description: Error de servidor ya sea por problemas de base de datos o logica en código

  #       400:
  #         description: no se pudo crear por que faltan datos obligatorios
  #   #Update de módulos
  #   delete: # endpoint request type (put request)
  #     tags: # Tag property
  #       - Modulos # Value of the tag
  #     summary: Activar y desactivar un módulo
  #     produces:
  #       - application/json
  #     parameters: # request parameters
  #       - in: body # request body
  #         name: delete # name of request, can be any name
  #         description: json para desactivar o activar el módulo
  #         required: false # can also be true depending on user preference
  #         schema: # Schema definition
  #           $ref: "#/definitions/delete"
  #     responses: # server responses
  #       200:
  #         description: se activo o desactivo con éxito
  #       500:
  #         description: Error de servidor ya sea por problemas de base de datos o logica en código

  #       400:
  #         description: no se pudo crear por que faltan datos obligatorios

  # #get de módulos por id
  # /modulos/{code}:
  #   get: # endpoint request type (put request)
  #     tags: # Tag property
  #       - Modulos # Value of the tag
  #     summary: Obtiene un módulo por id
  #     produces:
  #       - application/json
  #     parameters: # request parameters
  #       - in: path # request body
  #         name: code # name of request, can be any name
  #         description: Id del módulo a consultar
  #         required: true # can also be true depending on user preference
  #         schema: # Schema definition
  #           type: integer
  #           minimum: 1
  #     responses: # server responses
  #       200:
  #         description: Datos consultados con éxito
  #       500:
  #         description: Error de servidor ya sea por problemas de base de datos o logica en código
  #   #get de módulos padres

  /personas: # path of the user from your endpoint
    post: # endpoint request type (post request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Crear una nueva persona
      consume: multipart/form-data
      produces:
        - application/json
      parameters: # request parameters
        - name: data
          in: body
          description: Datos de la persona
          required: true
          schema:
            $ref: "#/definitions/createPersona"
      responses: # server responses
        200:
          description: Se creó con éxito la nueva persona
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        400:
          description: Faltan datos para realizar el proceso

    put: # endpoint request type (put request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Actualizar un registro de persona
      consume: multipart/form-data
      produces:
        - application/json
      parameters: # request parameters
        - name: data
          in: body
          description: Datos de la persona
          required: true
          schema:
            $ref: "#/definitions/updatePersona"
      responses: # server responses
        200:
          description: Los datos han sido actualizados
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        400:
          description: Faltan datos para realizar el proceso
  /personas/{code}:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: recupera a una persona por su codigo, id, numero de documento
      produces:
        - application/json
      parameters: # request parameters
        - name: code
          in: path
          description: id de la persona a recuperar
          required: true
          type: string
          example: 1
      responses: # server responses
        200:
          description: Los datos han sido actualizados
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No encontrado
 
  /personas/avatar:
    post: # endpoint request type (put request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Actualizar la fotografía de perfil de una persona
      consume: multipart/form-data
      produces:
        - application/json
      parameters: # request parameters
        - name: fotoPerfil
          in: formData
          description: fotografía de la persona
          required: true
          type: file
        - name: data
          in: body
          description: Contiene el id de la persona a actualizar la fotografía
          required: true
          type: object
          properties:
            userId:
              type: string
              description: el id de la persona a la que se  actualzará la fotografía
              example: 1


      responses: # server responses
        200:
          description: Los datos han sido actualizados
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        400:
          description: Faltan datos para realizar el proceso
  /personas/find/:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: Recupera todas las personas del sistema
      produces:
        - application/json
      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  /personas/find/{filter}:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: Recupera todas las personas del sistema que cumplan con el filtro
      produces:
        - application/json
      parameters: # request parameters
        - name: filter
          in: path
          description: filtro para la/s persona/s a recuperar
          required: true
          type: string
          example: 1
      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  
  /personas/actives:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: Recupera todas las personas activas del sistema (vivas y habilitadas)
      produces:
        - application/json
      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  /personas/actives/{filter}:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: Recupera todas las personas activas del sistema (vivas y habilitadas) que cumplan el filtro
      produces:
        - application/json
      parameters: # request parameters
        - name: filter
          in: path
          description: filtro para la/s persona/s a recuperar
          required: true
          type: string
          example: 1
      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  
  /personas/select:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Obtiene todos las personas para usarlas en un select
      produces:
        - application/json
      # parameters: # request parameters
      #   - in: path # request body
      #     name: code # name of request, can be any name
      #     description: Get para obtener los módulos principales o padres
      #     required: false # can also be true depending on user preference

      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  /personas/select/{filter}:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Obtiene las personas que coincidan con el filtro de busqueda
      produces:
        - application/json
      parameters: # request parameters
        - in: path # request body
          name: filter # name of request, can be any name
          description: Valor a buscar nombre de la persona en este caso
          required: true # can also be true depending on user preference

      responses: # server responses
        200:
          description: Datos consultados con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

  /personas/phone/{phoneNumber}:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: Verifica si el numero de telefono existe
      produces:
        - application/json
      parameters: # request parameters
        - name: phoneNumber
          in: path
          description: numero de telefono a verificar si existe o no
          required: true
          type: string
          example: 6192-6479
      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  
  /personas/document/{documentNumber}:
    get:
      tags: # Tag property
        - Personas # Value of the tag
      summary: Verifica si el numero de documento ya existe
      produces:
        - application/json
      parameters: # request parameters
        - name: documentNumber
          in: path
          description: numero de documento a verificar si existe o no
          required: true
          type: string
          example: 05983551-1
      responses: # server responses
        200:
          description: Se encontró el registro
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        404:
          description: No se encontró el registro
  /personas/enable:
    put: # endpoint request type (put request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Habilitar o deshabilitar una persona
      produces:
        - application/json
      parameters: # request parameters
        - name: data
          in: body
          description: Datos para habilitar o deshabilitar una persona
          required: true
          schema:
            $ref: "#/definitions/disableOrEnable"
      responses: # server responses
        201:
          description: Los datos han sido actualizados
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        400:
          description: Faltan datos para realizar el proceso
  /personas/died:
    put: # endpoint request type (put request)
      tags: # Tag property
        - Personas # Value of the tag
      summary: Establecer como fallecida a una persona
      produces:
        - application/json
      parameters: # request parameters
        - name: data
          in: body
          description: Datos para habilitar o deshabilitar una persona
          required: true
          schema:
            $ref: "#/definitions/setDied"
      responses: # server responses
        201:
          description: Los datos han sido actualizados
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en códig
        400:
          description: Faltan datos para realizar el proceso

#Definitions
definitions: # Schema defination for request body
  createPersona:
    type: object
    properties:
      nombre:
        type: string
        description: nombre de la persona
        example: Brenda Ariel 
      apellido:
        type: string
        description: apellido de la persona
        example: Gómez Claros
      telefono:
        type: string
        description: teléfono de la persona
        example: 7623-2323
      sexo:
        type: integer
        description: id que indica el sexo de la persona. Es el id que representa el sexo.
        example: 1
      fotoPerfil:
        type: string
        format: binary
        description: fotografía de perfil de la personas
      nacionalidad:
        type: number
        description: id de la nacionalidad de la persona
        example: 1
      fechaNacimiento:
        type: string
        description: fecha de nacimiento de la persona
        example: "1995-03-03"
      departamentoNacimiento:
        type: number
        description: id del departamento en que nació la persona
        example: 1
      municipioNacimiento:
        type: number
        description: id del municipio en que nació la persona
        example: 1        
      cantonNacimiento:
        type: number
        description: id del cantón en que nació la persona
        example: 1            
      departamentoResidencia:
        type: number
        description: id del departamento en que reside la persona
        example: 1         
      municipioResidencia:
        type: number
        description: id del municipio en que reside la persona
        example: 1                 
      cantonResidencia:
        type: number
        description: id del cantón en que reside la persona
        example: 1  
      tipoDocumento:
        type: number
        description: id del tipo de documento de la persona
        example: 1    
      numeroDocumento:
        type: string
        description: número de documento de la persona
        example: 05433223-9                          
      estadoCivil:
        type: number
        description: id del estado civil de la persona
        example: 1  
      profesion:
        type: number
        description: id de la profesión de la persona
        example: 1  
      direccion:
        type: string
        description: dirección de la persona
        example: 1
      createUser:
        type: boolean
        description: indicador para saber si se registrará un usuario para esta persona
        example: true  
      iglesia:
        type: string
        description: Código de la iglesia donde está el usuario
        example: IG-213414  
      correo_electronico:
        type: string
        description: correo electrónico del usuario 
        example: arielbrenda@gmail.com  
      rol:
        type: number
        description: id del rol que se le asigna al usuario
        example: 1  
      alias:
        type: string
        description: alias para el usuario, este se mostrará en el sistema
        example: Arienda                                                                     
  updatePersona:
    type: object
    properties:
      nombre:
        type: string
        description: nombre de la persona
        example: Brenda Ariel 
      apellido:
        type: string
        description: apellido de la persona
        example: Gómez Claros
      telefono:
        type: string
        description: teléfono de la persona
        example: 7623-2323
      sexo:
        type: integer
        description: id que indica el sexo de la persona. Es el id que representa el sexo.
        example: 1
      nacionalidad:
        type: number
        description: id de la nacionalidad de la persona
        example: 1
      fechaNacimiento:
        type: string
        description: fecha de nacimiento de la persona
        example: "1995-03-03"
      departamentoNacimiento:
        type: number
        description: id del departamento en que nació la persona
        example: 1
      municipioNacimiento:
        type: number
        description: id del municipio en que nació la persona
        example: 1        
      cantonNacimiento:
        type: number
        description: id del cantón en que nació la persona
        example: 1            
      departamentoResidencia:
        type: number
        description: id del departamento en que reside la persona
        example: 1         
      municipioResidencia:
        type: number
        description: id del municipio en que reside la persona
        example: 1                 
      cantonResidencia:
        type: number
        description: id del cantón en que reside la persona
        example: 1  
      tipoDocumento:
        type: number
        description: id del tipo de documento de la persona
        example: 1    
      numeroDocumento:
        type: string
        description: número de documento de la persona
        example: 05433223-9                          
      estadoCivil:
        type: number
        description: id del estado civil de la persona
        example: 1  
      profesion:
        type: number
        description: id de la profesión de la persona
        example: 1  
      direccion:
        type: string
        description: dirección de la persona
        example: 1
      id: 
        type: string
        description: id de la persona a actualizar
        example: 12

  disableOrEnable:
    type: object
    properties:
      code:
        type: number
        description: id de la persona a habilitar o deshabilitar
        example: 1
      status:
        type: number
        description: 1 para habilitar, 0 para deshabilitar
        example: 1

  setDied:
    type: object
    properties:
      code:
        type: number
        description: id de la persona a modificar
        example: 1
      date:
        type: string
        description: Fecha en la cual ha fallecido la persona
        example: "2021-02-28"
     