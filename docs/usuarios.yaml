paths:
  /usuarios: # path of the user from your endpoint
    post: # endpoint request type (post request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Crear un nuevo Usuario
      produces:
        - application/json
      parameters: # request parameters
        - in: body # request body
          name: Create # name of request, can be any name
          description: Esto es la data para crear un nuevo Usuario
          required: false # can also be true depending on user preference
          schema: # Schema definition
            $ref: "#/definitions/create"
      responses: # server responses
        201:
          description: se creó con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

        400:
          description: no se pudo crear por que faltan datos obligatorios

    #Update de módulos
    put: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Actualizar un  usuario
      produces:
        - application/json
      parameters: # request parameters
        - in: body # request body
          name: Update # name of request, can be any name
          description: objeto para actualizar un usuario
          required: true # can also be true depending on user preference
          schema: # Schema definition
            $ref: "#/definitions/update"
      responses: # server responses
        200:
          description: se actualizó con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

        400:
          description: no se pudo crear por que faltan datos obligatorios
      #Update de módulos
    delete: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Eliminar el acceso
      produces:
        - application/json
      parameters: # request parameters
        - in: body # request body
          name: Delete # name of request, can be any name
          description: objeto para eliminar un usuario
          required: true # can also be true depending on user preference
          schema: # Schema definition
            $ref: "#/definitions/delete"
      responses: # server responses
        200:
          description: se elimino con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

        400:
          description: no se pudo crear por que faltan datos obligatorios

  #get de módulos por id
  /usuarios/{code}:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Obtiene un usuario por id
      produces:
        - application/json
      parameters: # request parameters
        - in: path # request body
          name: code # name of request, can be any name
          description: Id del usuario a consultar
          required: true # can also be true depending on user preference
          schema: # Schema definition
            type: integer
            minimum: 1
      responses: # server responses
        200:
          description: Datos consultados con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código
    #get de módulos padres
  /modulos/select:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Modulos # Value of the tag
      summary: Obtiene todos los módulos padres
      produces:
        - application/json
      # parameters: # request parameters
      #   - in: path # request body
      #     name: code # name of request, can be any name
      #     description: Get para obtener los módulos principales o padres
      #     required: false # can also be true depending on user preference

      responses: # server responses
        200:
          description: Datos consultados con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

  #get para validar correo
  /usuarios/validar/correo/{valor}:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Se Obtiene un valor numerico que indica la cantidad de registro que hay con ese correo, si el valor es 1, ya existe si el valor es 0, no existe
      produces:
        - application/json
      parameters: # request parameters
        - in: path # request body
          name: valor # name of request, can be any name
          description: Correo eletrónico a buscar
          required: true # can also be true depending on user preference
          schema: # Schema definition
            type: string
      responses: # server responses
        200:
          description: Datos con valor del numero de registros
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

  #get para validar persona
  /usuarios/validar/persona/{valor}:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Se Obtiene un valor numerico que indica la cantidad de registro que hay con ese codigo de persona, si el valor es 1, ya existe si el valor es 0, no existe
      produces:
        - application/json
      parameters: # request parameters
        - in: path # request body
          name: valor # name of request, can be any name
          description: código de persona
          example: P-454354
          required: true # can also be true depending on user preference
          schema: # Schema definition
            type: string
      responses: # server responses
        200:
          description: Datos con valor del numero de registros
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

  #     #get de módulos padres
  # /modulos/select/{filter}:
  #   get: # endpoint request type (put request)
  #     tags: # Tag property
  #       - Modulos # Value of the tag
  #     summary: Obtiene los módulos padres que coincidan con el filtro de busqueda
  #     produces:
  #       - application/json
  #     parameters: # request parameters
  #       - in: path # request body
  #         name: filter # name of request, can be any name
  #         description: Valor a buscar nombre de módulo en este caso
  #         required: true # can also be true depending on user preference

  #     responses: # server responses
  #       200:
  #         description: Datos consultados con éxito
  #       500:
  #         description: Error de servidor ya sea por problemas de base de datos o logica en código

  /usuarios/all:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Obtiene todos los usuarios
      produces:
        - application/json
      # parameters: # request parameters
      #   - in: path # request body
      #     name: code # name of request, can be any name
      #     description: Get para obtener los módulos principales o padres
      #     required: false # can also be true depending on user preference

      responses: # server responses
        200:
          description: Datos consultados con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código
      #get de módulos padres
  /usuarios/all/{filter}:
    get: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Obtiene los usuarios  que coincidan con el filtro de búsqueda
      produces:
        - application/json
      parameters: # request parameters
        - in: path # request body
          name: filter # name of request, can be any name
          description: Valor a buscar es posible por nombres, apellidos, código persona, número documento, nombre de la iglesia, correo eletrónico
          required: true # can also be true depending on user preference

      responses: # server responses
        200:
          description: Datos consultados con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código
  # /modulos/children/{code}:
  #   get: # endpoint request type (put request)
  #     tags: # Tag property
  #       - Modulos # Value of the tag
  #     summary: Obtiene los módulos hijos que tenga un módulo principal(padre)
  #     produces:
  #       - application/json
  #     parameters: # request parameters
  #       - in: path # request body
  #         name: code # name of request, can be any name
  #         description: Código del módulo principal
  #         required: true # can also be true depending on user preference

  #     responses: # server responses
  #       200:
  #         description: Datos consultados con éxito
  #       500:
  #         description: Error de servidor ya sea por problemas de base de datos o logica en código
  /usuarios/bloqueo: # path of the user from your endpoint
    post: # endpoint request type (post request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Bloquear o desbloquear un usuario
      produces:
        - application/json
      parameters: # request parameters
        - in: body # request body
          name: Bloqueo # name of request, can be any name
          description: Esto es la data para bloquear o desbloquear un usuario
          required: false # can also be true depending on user preference
          schema: # Schema definition
            $ref: "#/definitions/bloqueo"
      responses: # server responses
        200:
          description: Bloqueado o desbloqueado con éxito
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

        400:
          description: no se pudo crear por que faltan datos obligatorios
        404:
          description: no se pudo encontrar el usuario
  /usuarios/request_new_password:
     put: # endpoint request type (put request)
      tags: # Tag property
        - Usuarios # Value of the tag
      summary: Solicitar correo con enlace para cambio de contraseña
      produces:
        - application/json
      parameters: # request parameters
        - in: body # request body
          name: correo # name of request, can be any name
          description: Datos de usuario para enviar correo con enlace
          required: true # can also be true depending on user preference
          schema: # Schema definition
            $ref: "#/definitions/requestMail"
      responses: # server responses
        200:
          description: Se proceso la solicitud, no asegura que el correo se haya enviado
          schema:
            $ref: "#/definitions/responseRequestMail"
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código

        400:
          description: Faltan datos, o el tipo no es una opcion válida
  /usuarios/change_password:
    put: # endpoint request type (put request)
     tags: # Tag property
       - Usuarios # Value of the tag
     summary: Restabler contraseña de usuario
     produces:
       - application/json
     parameters: # request parameters
       - in: body # request body
         name: datos # name of request, can be any name
         description: Datos para realizar el cambio de contraseña
         required: true # can also be true depending on user preference
         schema: # Schema definition
           $ref: "#/definitions/changePasswordRequest"
     responses: # server responses
        200:
          description: El proceso se realizó pero no se cambio la contraseña. Lo mismo que 201 pero resultado false.
        201:
          description: Se cambió la contraseña
          schema:
            $ref: "#/definitions/responseChangePasswordRequest"
        500:
          description: Error de servidor ya sea por problemas de base de datos o logica en código
        400:
          description: Faltan datos
        403:
          description: El token es inválido
  
definitions: # Schema defination for request body
  create:
    type: object
    properties:
      persona:
        type: string
        description: nombre del código generado por el sistema de la persona
        example: P-454354
      iglesia:
        type: string
        description: Codigo generado por el sistema de la iglesia
        example: IG_TEST
      correo_electronico:
        type: string
        description: correo del usuario esté será su correo de login
        example: corre@dominio.com
      rol:
        type: integer
        description: id autoincremental del rol
        example: 1
      alias:
        type: string
        description: Este es el nombre que se va a mostrar en el sistema para el usuario
        example: Juan Perez
  update:
    type: object
    properties:
      code:
        type: integer
        description: Código del módulo
      iglesia:
        type: string
        description: Código de la iglesia
        example: IG-26332
      correo_electronico:
        type: string
        description: Correo eletrónico del usuario
      rol:
        type: integer
        description: Id auto incremental del rol
      alias:
        type: string
        description: Nombre que se muestra en el sistema
        example: Jose Perez
  bloqueo:
    type: object
    properties:
      code:
        type: integer
        description: Código del usuario a bloquear o desbloquear
      estado:
        type: integer
        description: 1 si desea bloquear 0 si desea desbloquear
  delete:
    type: object
    properties:
      code:
        type: integer
        description: Código del usuario a borrar
  requestMail:
    type: object
    properties:
        email:
          type: string
          description: Correo electrónico a mandar el enlace
          example: denny.majano13@gmail.com
        changeRequestType: 
          type: integer
          description: Tipo de solicitud, 1 es por usuario, 2 por primera vez, 3 por admin
          example: 1
  responseRequestMail:
    type: object
    properties:
        estado:
          type: boolean
          description: es verdadero si se envió, falso si no encontró el correo
          example: true
  changePasswordRequest:
    type: object
    properties:
        securityCode:
          type: string
          description: Código de seguridad para realizar el cambio de contraseña. Se requiere si es tipo 2 y 3 (cambio inicial del usario despues de registro y restablecimiento por admin respectivamente)
          example: C6IVKGSP8GT5
        newPassword: 
          type: string
          description: Contraseña nueva a registrar
          example: 12345Abc
        token: 
          type: string
          description: Token que permite el cambio de contraseña
          example: fc531c89-8e3a-454a-b90a-c8bf9ed19b4d
        type: 
          type: integer
          description: Tipo de cambio a realizar
          example: 1
  responseChangePasswordRequest:
    type: object
    properties:
        estado:
          type: boolean
          description: es verdadero si se envió, falso si no encontró el correo
          example: true